import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, mean_squared_error, \
    mean_absolute_error, r2_score, log_loss
from sklearn.preprocessing import LabelEncoder
from sklearn.pipeline import make_pipeline
from sklearn.compose import make_column_transformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler

train_data = pd.read_excel("Training Set.xlsx")
test_data = pd.read_excel("Test Set.xlsx")

X_train = train_data.iloc[:, :-1]
y_train = train_data.iloc[:, -1]
X_test = test_data.iloc[:, :-1]
y_test = test_data.iloc[:, -1]

numeric_features = X_train.select_dtypes(include=['int64', 'float64']).columns
categorical_features = X_train.select_dtypes(include=['object']).columns

preprocessor = make_column_transformer(
    (StandardScaler(), numeric_features),
    (make_pipeline(SimpleImputer(strategy='most_frequent'), LabelEncoder()), categorical_features)
)

X_train_scaled = preprocessor.fit_transform(X_train)
X_test_scaled = preprocessor.transform(X_test)

dt_model = DecisionTreeClassifier()

param_grid = {
    'max_depth': [5, 10, 15]
}

grid_search = GridSearchCV(dt_model, param_grid, cv=10)
grid_search.fit(X_train_scaled, y_train)

best_dt_model = grid_search.best_estimator_

cv_scores = cross_val_score(best_dt_model, X_train_scaled, y_train, cv=10)

y_train_pred = best_dt_model.predict(X_train_scaled)
train_accuracy = accuracy_score(y_train, y_train_pred)
train_precision = precision_score(y_train, y_train_pred, average='weighted')
train_recall = recall_score(y_train, y_train_pred, average='weighted')
train_f1 = f1_score(y_train, y_train_pred, average='weighted')

train_mse = mean_squared_error(y_train, y_train_pred)
train_rmse = np.sqrt(train_mse)
train_r2 = r2_score(y_train, y_train_pred)

train_proba = best_dt_model.predict_proba(X_train_scaled)
train_log_loss = log_loss(y_train, train_proba)

y_test_pred = best_dt_model.predict(X_test_scaled)
test_accuracy = accuracy_score(y_test, y_test_pred)
test_precision = precision_score(y_test, y_test_pred, average='weighted')
test_recall = recall_score(y_test, y_test_pred, average='weighted')
test_f1 = f1_score(y_test, y_test_pred, average='weighted')

test_mse = mean_squared_error(y_test, y_test_pred)
test_rmse = np.sqrt(test_mse)
test_r2 = r2_score(y_test, y_test_pred)

test_proba = best_dt_model.predict_proba(X_test_scaled)
test_log_loss = log_loss(y_test, test_proba)

print("Training set accuracy:", train_accuracy)
print("Training set precision:", train_precision)
print("Training set recall:", train_recall)
print("Training set F1 score:", train_f1)
print("Training set MSE:", train_mse)
print("Training set RMSE:", train_rmse)
print("Training set R-squared:", train_r2)
print("Training set Log Loss:", train_log_loss)

print("Test set accuracy:", test_accuracy)
print("Test set precision:", test_precision)
print("Test set recall:", test_recall)
print("Test set F1 score:", test_f1)
print("Test set MSE:", test_mse)
print("Test set RMSE:", test_rmse)
print("Test set R-squared:", test_r2)
print("Test set Log Loss:", test_log_loss)
